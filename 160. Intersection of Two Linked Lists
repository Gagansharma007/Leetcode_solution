// Given the heads of two singly linked-lists headA and headB,
// return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode *tempA = headA;
        ListNode *tempB = headB;
        int a = 0 , b = 0;
        if(!tempA || !tempB)
        return NULL;
        while(tempA){
            a++;
            tempA = tempA->next;
        }
        while(tempB){
            b++;
            tempB = tempB->next;
        }
        tempA = headA;
        tempB = headB;
        if(a > b)
        for(int i = 0 ; i < a - b; i++){
            tempA = tempA->next;
        }
        else
        for(int i = 0 ; i < b - a ; i++){
            tempB = tempB->next;
        }
        while(tempA && tempB ){
            if(tempA == tempB)
            return tempA;
            tempA = tempA->next;
            tempB = tempB->next;
        }
        return NULL;
    }
};
